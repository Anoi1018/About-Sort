打乱一个没有重复元素的数组。

实现 Solution class:
Solution(int[] nums) 使用整数数组 nums 初始化对象
int[] reset() 重设数组到它的初始状态并返回
int[] shuffle() 返回数组随机打乱后的结果

示例:
// 以数字集合 1, 2 和 3 初始化数组。
int[] nums = {1,2,3};
Solution solution = new Solution(nums);

// 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。
solution.shuffle();

// 重设数组到它的初始状态[1,2,3]。
solution.reset();

// 随机返回数组[1,2,3]打乱后的结果。
solution.shuffle();

代码示意：随机算法--Fisher-Yates算法
var Solution = function(nums) {
    this.nums = nums;
};

Solution.prototype.reset = function() {
    return this.nums;
};

Solution.prototype.shuffle = function() {
//从最后一位开始 将当前元素与前面的随机元素进行交换
//随机元素下标小于等于当前元素
//避免随机过的位置再随机一次
    let ans = [...this.nums],len = this.nums.length;
    for(let i=len-1;i>0;i--){
        let randomIndex = Math.floor(Math.random()*(i+1)); //【0，i】
        [ans[randomIndex],ans[i]] = [ans[i],ans[randomIndex]];
    }
    return ans;
};
